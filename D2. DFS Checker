#include<bits/stdc++.h>
using namespace std;
const int MOD = 1e9+7;
const int N = 3e5+10;
using ll = long long;
 
template<class Fun> class y_combinator_result {
    Fun fun_;
public:
    template<class T> explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}
    template<class ...Args> decltype(auto) operator()(Args &&...args) { return fun_(std::ref(*this), std::forward<Args>(args)...); }
};
template<class Fun> decltype(auto) y_combinator(Fun &&fun) { return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun)); }
 
 
int T = 0;
 
vector<int>g[N];
int tin[N],tout[N],par[N];

// Simple Problem, Use of precomputed tin and tout to check if u lies in the subtree of v or not in O(1).
 
void dfs(int i, int p){ // Just a simple dfs to remember tin and tout for each node.
    tin[i]=tout[i]=T++;
    for(int j:g[i]){
        if(j==p) continue;
        par[j] = i;
        dfs(j,i);
        tout[i] = tout[j];
    }
}
 
int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    int t; cin>>t;
    while(t--){
        int n,q; cin>>n>>q;
        for(int i = 0; i <= n; i++) g[i].clear();
        for(int i=2;i<=n;i++) {
            int x; cin>>x;
            g[x].push_back(i);
        }
        T=0;
        dfs(1,1);
        vector<int>v(n+1);
        for(int i=1;i<=n;i++) cin>>v[i];
 
        auto ok = y_combinator([&](const auto& self, int i){
            if(v[i]==1) return (i==1);
            int prev = v[i-1];
            return (tin[par[v[i]]]<=tin[v[i-1]]&&tout[par[v[i]]]>=tout[v[i-1]]);
            // left node must lie in the subtree of parent of curr node.
        });
        int ct = 0;
        for(int i=1;i<=n;i++) ct+=ok(i);
        while(q--){
            int x,y; cin>>x>>y;
            set<int>st; st.insert(x); st.insert(y);
            if(x>1) st.insert(x-1);
            if(x<n) st.insert(x+1);
            if(y>1) st.insert(y-1);
            if(y<n) st.insert(y+1);
            for(auto elem:st) ct -= (ok(elem));
            swap(v[x],v[y]);
            for(auto elem:st) ct += (ok(elem));
            cout<<(ct==n? "YES" : "NO")<<'\n';
        }
    }
}
